# GitLab CI/CD for SmartSearch-AI
stages:
  - test
  - deploy-staging
  - deploy-production

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POSTGRES_DB: smartsearch
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

cache:
  paths:
    - .cache/pip/

services:
  - name: ankane/pgvector:latest
    alias: postgres
    variables:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD

# Test stage
test-semantic-search:
  stage: test
  image: python:3.10
  before_script:
    - cd backend
    - pip install --cache-dir .cache/pip -r requirements.txt
    - export DATABASE_URL="postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB"
    - python3 scripts/init_db.py
    - python3 scripts/upload_products.py
  script:
    - export USE_LOCAL_EMBEDDINGS="true"
    - python3 run_tests.py --environment staging --advanced
  artifacts:
    when: always
    reports:
      junit: backend/test_results.xml
    paths:
      - backend/test_report.html
      - backend/comprehensive_test_results.json
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Development deployment
deploy-staging:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "üöÄ Deploying to staging environment"
    - PASS_RATE=$(cat backend/comprehensive_test_results.json | jq -r '.pass_rate')
    - echo "Test pass rate: $PASS_RATE"
    - |
      if (( $(echo "$PASS_RATE >= 0.75" | bc -l) )); then
        echo "‚úÖ Pass rate meets staging requirements"
        # Add your staging deployment commands here
        echo "Deploying to staging..."
      else
        echo "‚ùå Pass rate too low for staging deployment"
        exit 1
      fi
  environment:
    name: staging
    url: https://staging.smartsearch-ai.example.com
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  dependencies:
    - test-semantic-search

# Production deployment
deploy-production:
  stage: deploy-production
  image: python:3.10
  before_script:
    - cd backend
    - pip install -r requirements.txt
  script:
    # Run production-level tests first
    - export DATABASE_URL="$PROD_DATABASE_URL"
    - python3 run_tests.py --environment production --advanced
    - echo "üéâ All production tests passed!"
    - echo "Deploying to production..."
    # Add your production deployment commands here
  environment:
    name: production
    url: https://smartsearch-ai.example.com
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual  # Require manual approval for production
  dependencies:
    - test-semantic-search
